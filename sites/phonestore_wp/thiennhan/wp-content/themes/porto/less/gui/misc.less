
// Lists
ul {
    &.list {
        li {
        }
        &.icons li {
            a {
                color: @body_color;
            }

            i,
            a:hover {
                color: @skinColor;
            }
        }
    }
}

.list {
    &.list-icons {
        li .fa {
            color: @color-primary;
            border-color: @color-primary;
        }
        &.list-icons-style-3 {
            li .fa {
                background-color: @color-primary;
            }
        }
    }
    &.list-ordened {
        li {
            &:before {
                color: @color-primary;
                border-color: @color-primary;
            }
        }
        &.list-ordened-style-3 {
            li {
                &:before {
                    background-color: @color-primary;
                }
            }
        }
    }
}

html {
    .for(@colors-list); .-each(@value) {
        @name:  extract(@value, 1);
        @color:  extract(@value, 2);
        @color-inverse:  extract(@value, 3);

        .list-@{name} {
            &.list-icons {
                li .fa {
                    color: @color;
                    border-color: @color;
                }
                &.list-icons-style-3 {
                    li .fa {
                        background-color: @color;
                        color: @color-inverse;
                    }
                }
            }
            &.list-ordened {
                li {
                    &:before {
                        color: @color;
                    }
                }
                &.list-ordened-style-3 {
                    li {
                        &:before {
                            background-color: @color-primary;
                            color: @color-inverse;
                        }
                    }
                }
            }
        }
    }
}

ul[class^="wsp-"] {
    li {
        &:before {
            color: @skinColor;
        }
    }
}

// Nav
ul.nav-pills > li.active > a {
    background-color: @skinColor;
    &:hover, &:focus {
        background-color: @skinColor;
    }
}

// Panel
.panel-group {
    .panel-heading a {
        color: @skinColor;
    }
    &.secondary {
        .panel-heading {
            background-color: @skinColor !important;
        }
    }
}

html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .panel-group {
        &.panel-group-@{name} {
            .panel-heading {
                background-color: @color !important;
                a {
                    color: @color-inverse;
                }
            }
        }
    }
}
}

// Toggle
section.toggle {
    label {
        color: @skinColor;
        .toggleLaberlBorder() when (@rtl = 1) {
            border-right-color: @skinColor;
        }
        .toggleLaberlBorder() when not (@rtl = 1) {
            border-left-color: @skinColor;
        }
        .toggleLaberlBorder;
    }
    &.active > label {
        background-color: @skinColor;
        border-color: @skinColor;
        color: #FFF;
    }

    .toggle-simple & {
        > label {
            &:after {
                background-color: @skinColor;
            }
        }
    }
}

// Toggle
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .toggle-@{name} {
        .toggle {
            label {
                color: @color;
                border-left-color: @color;
                border-right-color: @color;
            }
            &.active > label {
                background-color: @color;
                border-color: @color;
                color: @color-inverse;
            }
        }
        &.toggle-simple .toggle {
            &.active > label {
                background: transparent;
                color: @color;
            }
            > label:after {
                background-color: @color;
            }
        }
    }
}
}

// Blockquote
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);

    .blockquote-@{name} {
        border-color: @color !important;
    }
}
}

// Image Zoom
div.wpb_single_image {
    .porto-vc-zoom {
        .zoom-icon {
            background-color: @skinColor;
            &:hover {
                background-color: lighten(@skinColor, 5%);
            }
        }
    }
}

.thumbnail,
.img-thumbnail {
    .zoom,
    .link {
        background-color: @skinColor;
        &:hover {
            background-color: lighten(@skinColor, 5%);
        }
    }
}

// Labels
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .label-@{name} {
        background-color: @color;
        border-color: @color;
    }
}
}

// Alerts
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .alert-@{name} {
        background-color: @color;
        border-color: darken(@color, 3%);
        color: @color-inverse;

        .alert-link {
            color: @color-inverse;
        }
    }
}
}

// Circle Slider
.porto-concept strong {
    color: @skinColor;
    font-family: @alt_font_family;
}
.fc-slideshow nav .fc-left i,
.fc-slideshow nav .fc-right i {
    color: @skinColor;
}

// Circular Bar
.circular-bar.only-icon .fa {
    color: @skinColor;
}

// Sections
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    section.section-@{name},
    .vc_row.section-@{name},
    .vc_column_container.section-@{name}{
        background-color: @color !important;
        border-color: darken(@color, 5%) !important;

        h1, h2, h3, h4, h5, h6 {
            color: @color-inverse;
        }

        p {
            color: darken(@color-inverse, 10%);
        }
    }

    section.section-@{name}-scale-2,
    .vc_row.section-@{name}-scale-2,
    .vc_column_container.section-@{name}-scale-2 {
        background-color: darken(@color, 10%) !important;
        border-color: darken(@color, 15%) !important;

        .sort-source {
            &.sort-source-style-2 {
                > li {
                    > a {
                        &, &:focus, &:hover {
                            color: @color-inverse;
                        }
                    }
                    &.active {
                        > a {
                            &:after {
                                border-top-color: darken(@color, 10%);
                            }
                        }
                    }
                }
            }
        }
    }
}
}

.sectionScaleColor(@a) when not (@a = 1) {
    html {
        .for(@color-background-scale); .-each(@value) {
        @index:  extract(@value, 1);
        @color:  extract(@value, 2);

        section.section-default-scale-@{index},
        .vc_row.section-default-scale-@{index},
        .vc_column_container.section-default-scale-@{index}{
            background-color: @color !important;
            border-top-color: darken(@color, 3%) !important;
        }
    }
    }
}
.sectionScaleColor(@a) when (@a = 1) {
    html {
        .for(@color-background-scale-dark); .-each(@value) {
        @index:  extract(@value, 1);
        @color:  extract(@value, 2);

        section.section-default-scale-@{index},
        .vc_row.section-default-scale-@{index},
        .vc_column_container.section-default-scale-@{index}{
            background-color: @color !important;
            border-top-color: darken(@color, 3%) !important;
        }
    }
    }
}

.sectionScaleColor(@dark);

// Popover
html {
    .for(@colors-list); .-each(@value) {
    @index:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .popover-@{index}{
        .popover-title {
            background-color: @color !important;
            color: @color-inverse !important;
        }
    }
}
}

// Dividers
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .divider {
        &.divider-@{name} {
            .fa {
                color: @color;
            }
            &.divider-small {
                hr {
                    background: @color;
                }
            }
        }
    }
}
}

html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .divider {
        &.divider-style-2 {
            &.divider-@{name} {
                .fa {
                    background: @color;
                    color: @color-inverse;
                }
            }
        }
    }
}
}

html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .divider {
        &.divider-style-3 {
            &.divider-@{name} {
                .fa {
                    border-color: @color;
                }
            }
        }
    }
}
}

// Pricing Tables
.pricing-table {
    li {
        color: @body_color;
    }
    h3 {
        .desc,
        span {
            color: @body_color;
        }
    }
    .plan {
        color: @body_color;
    }

    .most-popular {
        h3 {
            .gradient(@color-primary, darken(@color-primary, 15%), @gradient);
            color: @color-primary-inverse;
            .desc {
                color: @color-primary-inverse;
            }
        }
    }

    &.pricing-table-flat {
        .plan {
            h3 {
                background-color: @color-primary;
                color: @color-primary-inverse;
                .desc {
                    color: @color-primary-inverse;
                }
                span {
                    background: @color-primary;
                    color: @color-primary-inverse;
                }
            }
        }
    }

    .pricingTablesStyles(@a) when not (@a = 1) {
        .most-popular {
            border-color: @color-primary;
        }
    }
    .pricingTablesStyles(@a) when (@a = 1) {

    }

    .pricingTablesStyles(@dark);
}

html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .pricing-table {
        .plan-@{name} {
            h3 {
                .gradient(@color, darken(@color, 15%), @gradient);
                color: @color-inverse;
                .desc {
                    color: @color-inverse;
                }
            }
        }

        &.pricing-table-flat {
            .plan-@{name} {
                h3 {
                    background-color: @color;
                    color: @color-inverse;
                    .desc {
                        color: @color-inverse;
                    }
                    span {
                        background: @color;
                        color: @color-inverse;
                    }
                }
            }
        }
    }
}
}

.pricingTablesColorStyles(@a) when not (@a = 1) {
    html {
        .for(@colors-list); .-each(@value) {
        @name:  extract(@value, 1);
        @color:  extract(@value, 2);
        @color-inverse:  extract(@value, 3);

        .pricing-table {
            .plan-@{name} {
                border-color: @color;
            }
        }
    }
    }
}
.pricingTablesColorStyles(@a) when (@a = 1) {

}

.pricingTablesColorStyles(@dark);

// Home Partials
.home-intro {
    .get-started {
        a:not(.btn) {
            color: @body_color;
        }
    }
    p {
        em {
            font-family: @alt_font_family;
            color: @skinColor;
        }
    }
    &.light {
        p {
            color: @skinColor;
        }
    }
}

// Home Intro
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);
    @color-inverse:  extract(@value, 3);

    .home-intro-@{name} {
        background: @color;
        color: @color-inverse;
        .get-started {
            a:not(.btn) {
                color: @color-inverse;
            }
        }
        p {
            &,
            em {
                color: @color-inverse;
            }
        }
        &.light {
            p {
                color: @color-inverse;
            }
        }
    }

}
}

// Background Colors
html {
    .for(@colors-list); .-each(@value) {
    @name:  extract(@value, 1);
    @color:  extract(@value, 2);

    .background-color-@{name} {
        background-color: @color !important;
    }
}
}

// Page 404
.page-not-found {
    h4 {
        color: @body_color;
    }
}
